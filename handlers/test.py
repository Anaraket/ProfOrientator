import os

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.test import kb, kb1
from utils.db import UserDatabase
from utils.functions import send_questions
from utils.states import QuestionsState
from utils.functions import result

router = Router()


# start
@router.message(Command(commands=['start']))
async def start_command(message: Message, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ü§ñ\n–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"
                         f" –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –≤–æ–∑–º–æ–∂–Ω—É—é –±—É–¥—É—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!üßë‚Äçüéì")
    await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=kb1)
    await state.set_state(QuestionsState.wait)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û
@router.message(F.text.lower().in_(['–¥–∞', '—Ö–æ—á—É', '–∂–µ–ª–∞—é']), QuestionsState.wait)
async def positive_answer(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–≤ –ø–æ–ª–Ω–æ–º –≤–∏–¥–µ):")
    await state.set_state(QuestionsState.fio)
    db = UserDatabase(os.getenv('DATABASE_NAME'))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user(message.from_user.id, message.from_user.username)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –§–ò–û. –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û
@router.message(QuestionsState.fio, lambda message: message.text == message.text.isalpha() or ' ' in message.text)
async def correct_fio(message: Message, state: FSMContext):
    db = UserDatabase(os.getenv('DATABASE_NAME'))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_full_name(message.from_user.id, message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:")
    await state.set_state(QuestionsState.institution)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û
@router.message(QuestionsState.fio)
async def incorrect_fio(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á - –ø—Ä–∏–º–µ—Ä)')


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —É—á. –∑–∞–≤–µ–¥–µ–Ω–∏—è. –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û
@router.message(QuestionsState.institution)
async def institution(message: Message, state: FSMContext):
    db = UserDatabase(os.getenv('DATABASE_NAME'))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_institution(message.from_user.id, message.text)
    await message.answer(text="–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ç–µ—Å—Ç—É üòä")
    await message.answer(
        text=f'<b><u>1-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=1)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.first)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç–µ—Å—Ç–∞
@router.message(F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ —Ö–æ—á—É', '–≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑']), QuestionsState.wait)
async def negative_answer(message: Message, state: FSMContext):
    await message.answer(text='–û—á–µ–Ω—å –∂–∞–ª—å üòî\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
    await state.clear()


# –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.first)
async def first(message: Message, state: FSMContext):
    await state.update_data(nature=0, technic=0, sign=0, art=0, human=0)
    data = await state.get_data()
    human = data['human']
    if message.text.lower() == "–¥–∞":
        human += 1
    await state.update_data(human=human)
    await message.answer(
        text=f'<b><u>2-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=2)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.second)


# –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.second)
async def second(message: Message, state: FSMContext):
    data = await state.get_data()
    technic = data['technic']
    if message.text.lower() == "–¥–∞":
        technic += 1
    await state.update_data(technic=technic)
    await message.answer(
        text=f'<b><u>3-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=3)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.third)


# –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.third)
async def third(message: Message, state: FSMContext):
    data = await state.get_data()
    art = data['art']
    if message.text.lower() == "–¥–∞":
        art += 1
    await state.update_data(art=art)
    await message.answer(
        text=f'<b><u>4-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=4)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.fourth)


# –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.fourth)
async def fourth(message: Message, state: FSMContext):
    data = await state.get_data()
    nature = data['nature']
    if message.text.lower() == "–¥–∞":
        nature += 1
    await state.update_data(nature=nature)
    await message.answer(
        text=f'<b><u>5-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=5)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.fifth)


# –ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.fifth)
async def fifth(message: Message, state: FSMContext):
    data = await state.get_data()
    sign = data['sign']
    if message.text.lower() == "–¥–∞":
        sign += 1
    await state.update_data(sign=sign)
    await message.answer(
        text=f'<b><u>6-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=6)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.sixth)


# –®–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.sixth)
async def sixth(message: Message, state: FSMContext):
    data = await state.get_data()
    human = data['human']
    if message.text.lower() == "–¥–∞":
        human += 1
    await state.update_data(human=human)
    await message.answer(
        text=f'<b><u>7-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u>\n\n<b></b>{send_questions(number=7)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.seventh)


# –°–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.seventh)
async def seventh(message: Message, state: FSMContext):
    data = await state.get_data()
    nature = data['nature']
    if message.text.lower() == "–¥–∞":
        nature += 1
    await state.update_data(nature=nature)
    await message.answer(
        text=f'<b><u>8-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=8)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.eighth)


# –í–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.eighth)
async def eight(message: Message, state: FSMContext):
    data = await state.get_data()
    sign = data['sign']
    if message.text.lower() == "–¥–∞":
        sign += 1
    await state.update_data(sign=sign)
    await message.answer(
        text=f'<b><u>9-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=9)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.ninth)


# –î–µ–≤—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.ninth)
async def ninth(message: Message, state: FSMContext):
    data = await state.get_data()
    technic = data['technic']
    if message.text.lower() == "–¥–∞":
        technic += 2
    await state.update_data(technic=technic)
    await message.answer(
        text=f'<b><u>10-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=10)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.tenth)


# –î–µ—Å—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.tenth)
async def tenth(message: Message, state: FSMContext):
    data = await state.get_data()
    art = data['art']
    if message.text.lower() == "–¥–∞":
        art += 2
    await state.update_data(art=art)
    await message.answer(
        text=f'<b><u>11-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=11)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.eleventh)


# –û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.eleventh)
async def eleventh(message: Message, state: FSMContext):
    data = await state.get_data()
    nature = data['nature']
    if message.text.lower() == "–¥–∞":
        nature += 1
    await state.update_data(nature=nature)
    await message.answer(
        text=f'<b><u>12-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=12)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twelfth)


# –î–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twelfth)
async def twelfth(message: Message, state: FSMContext):
    data = await state.get_data()
    art = data['art']
    if message.text.lower() == "–¥–∞":
        art += 1
    await state.update_data(art=art)
    await message.answer(
        text=f'<b><u>13-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=13)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.thirteenth)


# –¢—Ä–∏–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.thirteenth)
async def thirteenth(message: Message, state: FSMContext):
    data = await state.get_data()
    technic = data['technic']
    if message.text.lower() == "–¥–∞":
        technic += 1
    await state.update_data(technic=technic)
    await message.answer(
        text=f'<b><u>14-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=14)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.fourteenth)


# –ß–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.fourteenth)
async def fourteenth(message: Message, state: FSMContext):
    data = await state.get_data()
    sign = data['sign']
    if message.text.lower() == "–¥–∞":
        sign += 2
    await state.update_data(sign=sign)
    await message.answer(
        text=f'<b><u>15-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=15)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.fifteenth)


# –ü—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.fifteenth)
async def fifteenth(message: Message, state: FSMContext):
    data = await state.get_data()
    human = data['human']
    if message.text.lower() == "–¥–∞":
        human += 2
    await state.update_data(human=human)
    await message.answer(
        text=f'<b><u>16-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u>\n\n<b></b>{send_questions(number=16)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.sixteenth)


# –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.sixteenth)
async def sixteenth(message: Message, state: FSMContext):
    data = await state.get_data()
    technic = data['technic']
    if message.text.lower() == "–¥–∞":
        technic += 2
    await state.update_data(technic=technic)
    await message.answer(
        text=f'<b><u>17-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=17)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.seventeenth)


# –°–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.seventeenth)
async def seventeenth(message: Message, state: FSMContext):
    data = await state.get_data()
    art = data['art']
    if message.text.lower() == "–¥–∞":
        art += 2
    await state.update_data(art=art)
    await message.answer(
        text=f'<b><u>18-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=18)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.eighteenth)


# –í–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.eighteenth)
async def eighteenth(message: Message, state: FSMContext):
    data = await state.get_data()
    nature = data['nature']
    if message.text.lower() == "–¥–∞":
        nature += 2
    await state.update_data(nature=nature)
    await message.answer(
        text=f'<b><u>19-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=19)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.nineteenth)


# –î–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.nineteenth)
async def nineteenth(message: Message, state: FSMContext):
    data = await state.get_data()
    sign = data['sign']
    if message.text.lower() == "–¥–∞":
        sign += 2
    await state.update_data(sign=sign)
    await message.answer(
        text=f'<b><u>20-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=20)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twentieth)


# –î–≤–∞–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twentieth)
async def twentieth(message: Message, state: FSMContext):
    data = await state.get_data()
    human = data['human']
    if message.text.lower() == "–¥–∞":
        human += 1
    await state.update_data(human=human)
    await message.answer(
        text=f'<b><u>21-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=21)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_first)


# –î–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_first)
async def twenty_first(message: Message, state: FSMContext):
    data = await state.get_data()
    technic = data['technic']
    if message.text.lower() == "–¥–∞":
        technic += 1
    await state.update_data(technic=technic)
    await message.answer(
        text=f'<b><u>22-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=22)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_second)


# –î–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_second)
async def twenty_second(message: Message, state: FSMContext):
    data = await state.get_data()
    sign = data['sign']
    if message.text.lower() == "–¥–∞":
        sign += 1
    await state.update_data(sign=sign)
    await message.answer(
        text=f'<b><u>23-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=23)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_third)


# –î–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_third)
async def twenty_third(message: Message, state: FSMContext):
    data = await state.get_data()
    human = data['human']
    if message.text.lower() == "–¥–∞":
        human += 2
    await state.update_data(human=human)
    await message.answer(
        text=f'<b><u>24-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=24)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_fourth)


# –î–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤—ë—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_fourth)
async def twenty_fourth(message: Message, state: FSMContext):
    data = await state.get_data()
    art = data['art']
    if message.text.lower() == "–¥–∞":
        art += 1
    await state.update_data(art=art)
    await message.answer(
        text=f'<b><u>25-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=25)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_fifth)


# –î–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_fifth)
async def twenty_fifth(message: Message, state: FSMContext):
    data = await state.get_data()
    nature = data['nature']
    if message.text.lower() == "–¥–∞":
        nature += 2
    await state.update_data(nature=nature)
    await message.answer(
        text=f'<b><u>26-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=26)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_sixth)


# –î–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_sixth)
async def twenty_sixth(message: Message, state: FSMContext):
    data = await state.get_data()
    technic = data['technic']
    if message.text.lower() == "–¥–∞":
        technic += 1
    await state.update_data(technic=technic)
    await message.answer(
        text=f'<b><u>27-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=27)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_seventh)


# –î–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_seventh)
async def twenty_seventh(message: Message, state: FSMContext):
    data = await state.get_data()
    human = data['human']
    if message.text.lower() == "–¥–∞":
        human += 1
    await state.update_data(human=human)
    await message.answer(
        text=f'<b><u>28-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=28)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_eighth)


# –î–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_eighth)
async def twenty_eighth(message: Message, state: FSMContext):
    data = await state.get_data()
    nature = data['nature']
    if message.text.lower() == "–¥–∞":
        nature += 1
    await state.update_data(nature=nature)
    await message.answer(
        text=f'<b><u>29-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=29)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.twenty_ninth)


# –î–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.twenty_ninth)
async def twenty_ninth(message: Message, state: FSMContext):
    data = await state.get_data()
    sign = data['sign']
    if message.text.lower() == "–¥–∞":
        sign += 1
    await state.update_data(sign=sign)
    await message.answer(
        text=f'<b><u>30-–π –≤–æ–ø—Ä–æ—Å‚ùì:</u></b>\n\n<b>{send_questions(number=30)}</b>',
        reply_markup=kb)
    await state.set_state(QuestionsState.thirtieth)


# –¢—Ä–∏–¥—Ü–∞—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.thirtieth)
async def thirtieth(message: Message, state: FSMContext):
    data = await state.get_data()
    art = data['art']
    if message.text.lower() == "–¥–∞":
        art += 1
    await state.update_data(art=art)
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    final_result, additional_text = result(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(text=final_result)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(text=additional_text)

    db = UserDatabase(os.getenv('DATABASE_NAME'))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_result(message.from_user.id, data)


# help
@router.message(Command(commands=['help']))
async def start_command(message: Message):
    await message.answer("""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–æ—Ñ–û—Ä–∏–µ–Ω—Ç–∏—Ä!

üîç <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>

1. <b>–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞:</b> –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç.
2. <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ 30 –≤–æ–ø—Ä–æ—Å–æ–≤.
3. <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.

üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å

üìä <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:</b>

‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –º–∏—Ä: –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏.
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∏—Ä: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.
‚Ä¢ –ú–∏—Ä –∑–Ω–∞–∫–æ–≤ –∏ —Ü–∏—Ñ—Ä: –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Å—Ö–µ–º–∞–º–∏.
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –º–∏—Ä: –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –¥–∏–∑–∞–π–Ω–∞.
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –º–∏—Ä: –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª—é–¥—å–º–∏.

‚ùì <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>:
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: https://t.me/Championnsss1

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—à–Ω–æ–π –∫–∞—Ä—å–µ—Ä–µ —Å –ü—Ä–æ—Ñ–û—Ä–∏–µ–Ω—Ç–∏—Ä!""")


# hz
@router.message()
async def start_command(message: Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")
