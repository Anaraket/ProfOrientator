from aiogram import Router, Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

# from keyboards.start_test import kb
from keyboards.test import question
from utils.functions import send_questions
from utils.states import QuestionsState

router = Router()


@router.message(Command(commands=['start']))
async def start_command(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ü§ñ\n–¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"
                         f" –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –≤–æ–∑–º–æ–∂–Ω—É—é –±—É–¥—É—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!üßë‚Äçüéì")
    await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(F.text.lower().in_(['–¥–∞', '—Ö–æ—á—É', '–∂–µ–ª–∞—é']))
async def positive_answer(message: Message, state: FSMContext):
    await message.answer(
        text=f'<u>1-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=1)}</b>',
        reply_markup=await question(1))
    await state.set_state(QuestionsState.first)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç–µ—Å—Ç–∞
@router.message(F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ —Ö–æ—á—É', '–≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑']))
async def negative_answer(message: Message, state: FSMContext):
    await message.answer(text='–û—á–µ–Ω—å –∂–∞–ª—å üòî\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
    await state.clear()


# –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@router.message(QuestionsState.first)
async def first(message: Message, state: FSMContext):
    print(message.text)
    # save_first()
    data = await state.get_data()
    print(data)
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await message.answer(
        text=f'<u>2-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=2)}</b>',
        reply_markup=await question(2))
    # await state.update_data(numbers=numbers,
    #                         used_numbers=used_numbers)
    await state.set_state(QuestionsState.second)
